//! This crate implement parsing AFL status from `fuzzer_status` file generated by AFL instances.
//!
//! All status data is included in the [AFLStat] struct. Use [AFLStat::load] function to
//! load it from a specific `fuzzer_stats` file, or use [AFLStat::load_all] function to let
//! this crate find all available `fuzzer_stats` file for you under a given AFL fuzz directory.
//! You can also use [AFLStat::parse] function to parse a [AFLStat] struct from the content of a
//! `fuzzer_stats` file.
//!

use std::fmt::{Display, Formatter};
use std::path::Path;
use std::time::SystemTime;

///
/// The error type in this crate.
///
#[derive(Debug)]
pub enum Error {
    /// An IO error occured.
    IoError(std::io::Error),

    /// Failed to parse `fuzzer_stats` file.
    ParseError,
}

impl From<std::io::Error> for Error {
    fn from(e: std::io::Error) -> Self {
        Self::IoError(e)
    }
}

impl std::error::Error for Error { }

impl Display for Error {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::IoError(e) => f.write_fmt(format_args!("{}", e)),
            Error::ParseError => f.write_str("parse error"),
        }
    }
}

/// Result type in this crate.
pub type Result<T> = std::result::Result<T, Error>;

/// AFL status data.
///
/// This is the primary struct in this crate.
#[derive(Clone, Default, Debug)]
pub struct AFLStat {
    pub start_time: SystemTime,
    pub last_update: SystemTime,
    pub fuzzer_pid: u32,
    pub cycles_done: i32,
    pub execs_done: i64,
    pub execs_per_sec: i32,
    pub paths_total: i64,
    pub paths_favored: i64,
    pub paths_found: i64,
    pub paths_imported: i64,
    pub max_depth: i32,
    pub cur_path: i64,
    pub pending_favs: i64,
    pub pending_total: i64,
    pub variable_paths: i64,
    pub stability: f64,
    pub bitmap_cvg: f64,
    pub unique_crashes: i32,
    pub unique_hangs: i32,
    pub last_path: Option<SystemTime>,
    pub last_crash: Option<SystemTime>,
    pub last_hang: Option<SystemTime>,
    pub execs_since_crash: i64,
    pub exec_timeout: i32,
    pub slowest_exec_ms: i32,
    pub peak_rss_mb: Option<i32>,
    pub afl_banner: String,
    pub afl_version: String,
    pub target_mode: String,
    pub command_line: String,
}

impl AFLStat {
    /// Parse the content of `fuzzer_stats` file.
    pub fn parse<'a, T>(text: T) -> Result<Self>
        where T: Into<&'a str> + 'a {
        unimplemented!()
    }

    /// Load AFL status data from the given `fuzzer_stats` file.
    ///
    /// ### Example
    ///
    /// ```ignore
    /// let stat = AFLStat::load("path/to/fuzz/dir/fuzzer_stats").unwrap();
    /// ```
    pub fn load<T>(stat_file: T) -> Result<Self>
        where T: Into<&Path> {
        unimplemented!()
    }

    /// Load AFL status data from all available `fuzzer_stats` files that are contained in the given
    /// fuzz directory.
    ///
    /// ### Example
    ///
    /// ```ignore
    /// let stats = AFLStat::find_many("path/to/fuzz/dir").unwrap();
    /// ```
    pub fn load_all<T>(fuzz_dir: T) -> Result<Vec<Self>>
        where T: Into<&Path> {
        unimplemented!()
    }
}

#[cfg(test)]
mod tests {

}
